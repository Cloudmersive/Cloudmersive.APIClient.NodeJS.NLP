/**
 * nlpapiv2
 * The powerful Natural Language Processing APIs (v2) let you perform part of speech tagging, entity identification, sentence parsing, and much more to help you understand the meaning of unstructured text.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ProfanityAnalysisRequest', 'model/ProfanityAnalysisResponse', 'model/SentimentAnalysisRequest', 'model/SentimentAnalysisResponse', 'model/SimilarityAnalysisRequest', 'model/SimilarityAnalysisResponse', 'model/SubjectivityAnalysisRequest', 'model/SubjectivityAnalysisResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ProfanityAnalysisRequest'), require('../model/ProfanityAnalysisResponse'), require('../model/SentimentAnalysisRequest'), require('../model/SentimentAnalysisResponse'), require('../model/SimilarityAnalysisRequest'), require('../model/SimilarityAnalysisResponse'), require('../model/SubjectivityAnalysisRequest'), require('../model/SubjectivityAnalysisResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.CloudmersiveNlpApiClient) {
      root.CloudmersiveNlpApiClient = {};
    }
    root.CloudmersiveNlpApiClient.AnalyticsApi = factory(root.CloudmersiveNlpApiClient.ApiClient, root.CloudmersiveNlpApiClient.ProfanityAnalysisRequest, root.CloudmersiveNlpApiClient.ProfanityAnalysisResponse, root.CloudmersiveNlpApiClient.SentimentAnalysisRequest, root.CloudmersiveNlpApiClient.SentimentAnalysisResponse, root.CloudmersiveNlpApiClient.SimilarityAnalysisRequest, root.CloudmersiveNlpApiClient.SimilarityAnalysisResponse, root.CloudmersiveNlpApiClient.SubjectivityAnalysisRequest, root.CloudmersiveNlpApiClient.SubjectivityAnalysisResponse);
  }
}(this, function(ApiClient, ProfanityAnalysisRequest, ProfanityAnalysisResponse, SentimentAnalysisRequest, SentimentAnalysisResponse, SimilarityAnalysisRequest, SimilarityAnalysisResponse, SubjectivityAnalysisRequest, SubjectivityAnalysisResponse) {
  'use strict';

  /**
   * Analytics service.
   * @module api/AnalyticsApi
   * @version 2.0.8
   */

  /**
   * Constructs a new AnalyticsApi. 
   * @alias module:api/AnalyticsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the analyticsProfanity operation.
     * @callback module:api/AnalyticsApi~analyticsProfanityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfanityAnalysisResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform Profanity and Obscene Language Analysis and Detection on Text
     * Analyze input text using advanced Profanity and Obscene Language Analysis to determine if the input contains profane language.  Supports English language input.  Consumes 1-2 API calls per sentence.
     * @param {module:model/ProfanityAnalysisRequest} input Input profanity analysis request
     * @param {module:api/AnalyticsApi~analyticsProfanityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProfanityAnalysisResponse}
     */
    this.analyticsProfanity = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling analyticsProfanity");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = ProfanityAnalysisResponse;

      return this.apiClient.callApi(
        '/nlp-v2/analytics/profanity', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsSentiment operation.
     * @callback module:api/AnalyticsApi~analyticsSentimentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SentimentAnalysisResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform Sentiment Analysis and Classification on Text
     * Analyze input text using advanced Sentiment Analysis to determine if the input is positive, negative, or neutral.  Supports English language input.  Consumes 1-2 API calls per sentence.
     * @param {module:model/SentimentAnalysisRequest} input Input sentiment analysis request
     * @param {module:api/AnalyticsApi~analyticsSentimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SentimentAnalysisResponse}
     */
    this.analyticsSentiment = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling analyticsSentiment");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = SentimentAnalysisResponse;

      return this.apiClient.callApi(
        '/nlp-v2/analytics/sentiment', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsSimilarity operation.
     * @callback module:api/AnalyticsApi~analyticsSimilarityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimilarityAnalysisResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform Semantic Similarity Comparison of Two Strings
     * Analyze two input text strings, typically sentences, and determine the semantic similarity of each.  Semantic similarity refers to the degree to which two sentences mean the same thing semantically.  Uses advanced Deep Learning to perform the semantic similarity comparison.  Consumes 1-2 API calls per sentence.
     * @param {module:model/SimilarityAnalysisRequest} input Input similarity analysis request
     * @param {module:api/AnalyticsApi~analyticsSimilarityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimilarityAnalysisResponse}
     */
    this.analyticsSimilarity = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling analyticsSimilarity");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = SimilarityAnalysisResponse;

      return this.apiClient.callApi(
        '/nlp-v2/analytics/similarity', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsSubjectivity operation.
     * @callback module:api/AnalyticsApi~analyticsSubjectivityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubjectivityAnalysisResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform Subjectivity and Objectivity Analysis on Text
     * Analyze input text using advanced Subjectivity and Objectivity Language Analysis to determine if the input text is objective or subjective, and how much.  Supports English language input.  Consumes 1-2 API calls per sentence.
     * @param {module:model/SubjectivityAnalysisRequest} input Input subjectivity analysis request
     * @param {module:api/AnalyticsApi~analyticsSubjectivityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubjectivityAnalysisResponse}
     */
    this.analyticsSubjectivity = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling analyticsSubjectivity");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = SubjectivityAnalysisResponse;

      return this.apiClient.callApi(
        '/nlp-v2/analytics/subjectivity', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
